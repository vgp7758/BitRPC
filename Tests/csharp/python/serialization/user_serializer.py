# Generated by BitRPC Protocol Generator
# File: User_serializer.py
# Language: Python
# Date: 2025-09-10 19:33:44


from typing import Any
from bitrpc.serialization import TypeHandler, BitMask, StreamWriter, StreamReader
from ..data.models import User

class UserSerializer(TypeHandler):

    @property
    def hash_code(self) -> int:
        return hash('User')

    def write(self, obj: User, writer: StreamWriter) -> None:
        message: User = obj
        mask = BitMask()

        # Bit mask group 0
        mask.set_bit(0, not self._is_default_string(message.name))
        mask.set_bit(1, not self._is_default_int32(message.age))
        mask.set_bit(2, not self._is_default_string(message.email))
        mask.write(writer)

        # Write field values
        if mask.get_bit(0):
            writer.write_string(message.name)
        if mask.get_bit(1):
            writer.write_int32(message.age)
        if mask.get_bit(2):
            writer.write_string(message.email)

    def read(self, reader: StreamReader) -> User:
        message = User()

        # Read bit mask group 0
        mask0 = BitMask()
        mask0.read(reader)

        if mask0.get_bit(0):
            message.name = reader.read_string()
        if mask0.get_bit(1):
            message.age = reader.read_int32()
        if mask0.get_bit(2):
            message.email = reader.read_string()

        return message

    def _is_default_string(self, value: str) -> bool:
        return value == ""

    def _is_default_int32(self, value: int) -> bool:
        return value == 0

