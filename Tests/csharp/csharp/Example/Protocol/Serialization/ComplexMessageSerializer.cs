// Generated by BitRPC Protocol Generator
// File: ComplexMessageSerializer.cs
// Language: CSharp
// Date: 2025-09-10 18:57:31


using System;
using System.IO;
using BitRPC.Serialization;

namespace Example.Protocol.Serialization
{
    public class ComplexMessageSerializer : ITypeHandler
    {
        public int HashCode => typeof(ComplexMessage).GetHashCode();

        public void Write(object obj, BitRPC.Serialization.StreamWriter writer)
        {
            var message = (ComplexMessage)obj;
            BitRPC.Serialization.BitMask mask = null;
            try
            {
                mask = BitRPC.Serialization.BitMaskPool.Get(2);
            // Bit mask group 0
            mask.SetBit(0, !IsDefault(message.field1));
            mask.SetBit(1, !IsDefault(message.field2));
            mask.SetBit(2, !IsDefault(message.field3));
            mask.SetBit(3, !IsDefault(message.field4));
            mask.SetBit(4, !IsDefault(message.field5));
            mask.SetBit(5, !IsDefault(message.field6));
            mask.SetBit(6, !IsDefault(message.field7));
            mask.SetBit(7, !IsDefault(message.field8));
            mask.SetBit(8, !IsDefault(message.field9));
            mask.SetBit(9, !IsDefault(message.field10));
            mask.SetBit(10, !IsDefault(message.field11));
            mask.SetBit(11, !IsDefault(message.field12));
            mask.SetBit(12, !IsDefault(message.field13));
            mask.SetBit(13, !IsDefault(message.field14));
            mask.SetBit(14, !IsDefault(message.field15));
            mask.SetBit(15, !IsDefault(message.field16));
            mask.SetBit(16, !IsDefault(message.field17));
            mask.SetBit(17, !IsDefault(message.field18));
            mask.SetBit(18, !IsDefault(message.field19));
            mask.SetBit(19, !IsDefault(message.field20));
            mask.SetBit(20, !IsDefault(message.field21));
            mask.SetBit(21, !IsDefault(message.field22));
            mask.SetBit(22, !IsDefault(message.field23));
            mask.SetBit(23, !IsDefault(message.field24));
            mask.SetBit(24, !IsDefault(message.field25));
            mask.SetBit(25, !IsDefault(message.field26));
            mask.SetBit(26, !IsDefault(message.field27));
            mask.SetBit(27, !IsDefault(message.field28));
            mask.SetBit(28, !IsDefault(message.field29));
            mask.SetBit(29, !IsDefault(message.field30));
            mask.SetBit(30, !IsDefault(message.field31));
            mask.SetBit(31, !IsDefault(message.field32));
            mask.Write(writer);

            // Bit mask group 1
            mask.SetBit(0, !IsDefault(message.field33));
            mask.SetBit(1, !IsDefault(message.field34));
            mask.SetBit(2, !IsDefault(message.field35));
            mask.SetBit(3, !IsDefault(message.field36));
            mask.SetBit(4, !IsDefault(message.field37));
            mask.SetBit(5, !IsDefault(message.field38));
            mask.SetBit(6, !IsDefault(message.field39));
            mask.SetBit(7, !IsDefault(message.field40));
            mask.Write(writer);

            // Write field values
            if (mask.GetBit(0))
            {
                writer.WriteString(message.field1);
            }
            if (mask.GetBit(1))
            {
                writer.WriteString(message.field2);
            }
            if (mask.GetBit(2))
            {
                writer.WriteString(message.field3);
            }
            if (mask.GetBit(3))
            {
                writer.WriteString(message.field4);
            }
            if (mask.GetBit(4))
            {
                writer.WriteString(message.field5);
            }
            if (mask.GetBit(5))
            {
                writer.WriteString(message.field6);
            }
            if (mask.GetBit(6))
            {
                writer.WriteString(message.field7);
            }
            if (mask.GetBit(7))
            {
                writer.WriteString(message.field8);
            }
            if (mask.GetBit(8))
            {
                writer.WriteString(message.field9);
            }
            if (mask.GetBit(9))
            {
                writer.WriteString(message.field10);
            }
            if (mask.GetBit(10))
            {
                writer.WriteString(message.field11);
            }
            if (mask.GetBit(11))
            {
                writer.WriteString(message.field12);
            }
            if (mask.GetBit(12))
            {
                writer.WriteString(message.field13);
            }
            if (mask.GetBit(13))
            {
                writer.WriteString(message.field14);
            }
            if (mask.GetBit(14))
            {
                writer.WriteString(message.field15);
            }
            if (mask.GetBit(15))
            {
                writer.WriteString(message.field16);
            }
            if (mask.GetBit(16))
            {
                writer.WriteString(message.field17);
            }
            if (mask.GetBit(17))
            {
                writer.WriteString(message.field18);
            }
            if (mask.GetBit(18))
            {
                writer.WriteString(message.field19);
            }
            if (mask.GetBit(19))
            {
                writer.WriteString(message.field20);
            }
            if (mask.GetBit(20))
            {
                writer.WriteString(message.field21);
            }
            if (mask.GetBit(21))
            {
                writer.WriteString(message.field22);
            }
            if (mask.GetBit(22))
            {
                writer.WriteString(message.field23);
            }
            if (mask.GetBit(23))
            {
                writer.WriteString(message.field24);
            }
            if (mask.GetBit(24))
            {
                writer.WriteString(message.field25);
            }
            if (mask.GetBit(25))
            {
                writer.WriteString(message.field26);
            }
            if (mask.GetBit(26))
            {
                writer.WriteString(message.field27);
            }
            if (mask.GetBit(27))
            {
                writer.WriteString(message.field28);
            }
            if (mask.GetBit(28))
            {
                writer.WriteString(message.field29);
            }
            if (mask.GetBit(29))
            {
                writer.WriteString(message.field30);
            }
            if (mask.GetBit(30))
            {
                writer.WriteString(message.field31);
            }
            if (mask.GetBit(31))
            {
                writer.WriteString(message.field32);
            }
            if (mask.GetBit(0))
            {
                writer.WriteString(message.field33);
            }
            if (mask.GetBit(1))
            {
                writer.WriteString(message.field34);
            }
            if (mask.GetBit(2))
            {
                writer.WriteString(message.field35);
            }
            if (mask.GetBit(3))
            {
                writer.WriteString(message.field36);
            }
            if (mask.GetBit(4))
            {
                writer.WriteString(message.field37);
            }
            if (mask.GetBit(5))
            {
                writer.WriteString(message.field38);
            }
            if (mask.GetBit(6))
            {
                writer.WriteString(message.field39);
            }
            if (mask.GetBit(7))
            {
                writer.WriteString(message.field40);
            }
            }
            finally
            {
                if (mask != null)
                {
                    BitRPC.Serialization.BitMaskPool.Return(mask);
                }
            }
        }

        public object Read(BitRPC.Serialization.StreamReader reader)
        {
            var message = new ComplexMessage();

            // Read bit masks using object pool
            BitRPC.Serialization.BitMask[] masks = new BitRPC.Serialization.BitMask[2];
            try
            {
            // Read bit mask group 0
            masks[0] = BitRPC.Serialization.BitMaskPool.Get(1);
            masks[0].Read(reader);
            // Read bit mask group 1
            masks[1] = BitRPC.Serialization.BitMaskPool.Get(1);
            masks[1].Read(reader);
            if (masks[0].GetBit(0))
            {
                message.field1 = reader.ReadString();
            }
            if (masks[0].GetBit(1))
            {
                message.field2 = reader.ReadString();
            }
            if (masks[0].GetBit(2))
            {
                message.field3 = reader.ReadString();
            }
            if (masks[0].GetBit(3))
            {
                message.field4 = reader.ReadString();
            }
            if (masks[0].GetBit(4))
            {
                message.field5 = reader.ReadString();
            }
            if (masks[0].GetBit(5))
            {
                message.field6 = reader.ReadString();
            }
            if (masks[0].GetBit(6))
            {
                message.field7 = reader.ReadString();
            }
            if (masks[0].GetBit(7))
            {
                message.field8 = reader.ReadString();
            }
            if (masks[0].GetBit(8))
            {
                message.field9 = reader.ReadString();
            }
            if (masks[0].GetBit(9))
            {
                message.field10 = reader.ReadString();
            }
            if (masks[0].GetBit(10))
            {
                message.field11 = reader.ReadString();
            }
            if (masks[0].GetBit(11))
            {
                message.field12 = reader.ReadString();
            }
            if (masks[0].GetBit(12))
            {
                message.field13 = reader.ReadString();
            }
            if (masks[0].GetBit(13))
            {
                message.field14 = reader.ReadString();
            }
            if (masks[0].GetBit(14))
            {
                message.field15 = reader.ReadString();
            }
            if (masks[0].GetBit(15))
            {
                message.field16 = reader.ReadString();
            }
            if (masks[0].GetBit(16))
            {
                message.field17 = reader.ReadString();
            }
            if (masks[0].GetBit(17))
            {
                message.field18 = reader.ReadString();
            }
            if (masks[0].GetBit(18))
            {
                message.field19 = reader.ReadString();
            }
            if (masks[0].GetBit(19))
            {
                message.field20 = reader.ReadString();
            }
            if (masks[0].GetBit(20))
            {
                message.field21 = reader.ReadString();
            }
            if (masks[0].GetBit(21))
            {
                message.field22 = reader.ReadString();
            }
            if (masks[0].GetBit(22))
            {
                message.field23 = reader.ReadString();
            }
            if (masks[0].GetBit(23))
            {
                message.field24 = reader.ReadString();
            }
            if (masks[0].GetBit(24))
            {
                message.field25 = reader.ReadString();
            }
            if (masks[0].GetBit(25))
            {
                message.field26 = reader.ReadString();
            }
            if (masks[0].GetBit(26))
            {
                message.field27 = reader.ReadString();
            }
            if (masks[0].GetBit(27))
            {
                message.field28 = reader.ReadString();
            }
            if (masks[0].GetBit(28))
            {
                message.field29 = reader.ReadString();
            }
            if (masks[0].GetBit(29))
            {
                message.field30 = reader.ReadString();
            }
            if (masks[0].GetBit(30))
            {
                message.field31 = reader.ReadString();
            }
            if (masks[0].GetBit(31))
            {
                message.field32 = reader.ReadString();
            }
            if (masks[1].GetBit(0))
            {
                message.field33 = reader.ReadString();
            }
            if (masks[1].GetBit(1))
            {
                message.field34 = reader.ReadString();
            }
            if (masks[1].GetBit(2))
            {
                message.field35 = reader.ReadString();
            }
            if (masks[1].GetBit(3))
            {
                message.field36 = reader.ReadString();
            }
            if (masks[1].GetBit(4))
            {
                message.field37 = reader.ReadString();
            }
            if (masks[1].GetBit(5))
            {
                message.field38 = reader.ReadString();
            }
            if (masks[1].GetBit(6))
            {
                message.field39 = reader.ReadString();
            }
            if (masks[1].GetBit(7))
            {
                message.field40 = reader.ReadString();
            }
            return message;
            }
            finally
            {
                foreach (var mask in masks)
                {
                    if (mask != null) BitRPC.Serialization.BitMaskPool.Return(mask);
                }
            }
        }

        private bool IsDefault(string value)
        {
            return string.IsNullOrEmpty(value);
        }

    }
}
