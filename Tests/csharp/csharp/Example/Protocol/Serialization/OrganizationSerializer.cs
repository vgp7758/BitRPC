// Generated by BitRPC Protocol Generator
// File: OrganizationSerializer.cs
// Language: CSharp
// Date: 2025-09-10 19:33:44


using System;
using System.IO;
using BitRPC.Serialization;

namespace Example.Protocol.Serialization
{
    public class OrganizationSerializer : ITypeHandler
    {
        public int HashCode => typeof(Organization).GetHashCode();

        public void Write(object obj, BitRPC.Serialization.StreamWriter writer)
        {
            var message = (Organization)obj;
            BitRPC.Serialization.BitMask mask = null;
            try
            {
                mask = BitRPC.Serialization.BitMaskPool.Get(1);
            // Bit mask group 0
            mask.SetBit(0, !IsDefault(message.name));
            mask.SetBit(1, !IsDefault(message.groups));
            mask.SetBit(2, !IsDefault(message.departments));
            mask.SetBit(3, !IsDefault(message.leader));
            mask.Write(writer);

            // Write field values
            if (mask.GetBit(0))
            {
                writer.WriteString(message.name);
            }
            if (mask.GetBit(1))
            {
                writer.WriteList(message.groups, x => writer.WriteObject(x));
            }
            if (mask.GetBit(2))
            {
                writer.WriteList(message.departments, x => writer.WriteString(x));
            }
            if (mask.GetBit(3))
            {
                writer.WriteObject(message.leader);
            }
            }
            finally
            {
                if (mask != null)
                {
                    BitRPC.Serialization.BitMaskPool.Return(mask);
                }
            }
        }

        public object Read(BitRPC.Serialization.StreamReader reader)
        {
            var message = new Organization();

            // Read bit masks using object pool
            BitRPC.Serialization.BitMask[] masks = new BitRPC.Serialization.BitMask[1];
            try
            {
            // Read bit mask group 0
            masks[0] = BitRPC.Serialization.BitMaskPool.Get(1);
            masks[0].Read(reader);
            if (masks[0].GetBit(0))
            {
                message.name = reader.ReadString();
            }
            if (masks[0].GetBit(1))
            {
                message.groups = reader.ReadList(() => reader.ReadObject());
            }
            if (masks[0].GetBit(2))
            {
                message.departments = reader.ReadList(() => reader.ReadString());
            }
            if (masks[0].GetBit(3))
            {
                message.leader = reader.ReadObject();
            }
            return message;
            }
            finally
            {
                foreach (var mask in masks)
                {
                    if (mask != null) BitRPC.Serialization.BitMaskPool.Return(mask);
                }
            }
        }

        private bool IsDefault(string value)
        {
            return string.IsNullOrEmpty(value);
        }

        private bool IsDefault(List<Group> value)
        {
            return value == new List<Group>();
        }

        private bool IsDefault(List<string> value)
        {
            return value == new List<string>();
        }

        private bool IsDefault(User value)
        {
            return value == default;
        }

    }
}
