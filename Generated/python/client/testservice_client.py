# Generated by BitRPC Protocol Generator
# File: TestService_client.py
# Language: Python
# Date: 2025-09-25 19:56:07


from typing import TypeVar, Generic, Optional
from .runtime.bitrpc.client import BaseClient, RpcClientFactory, IRpcClient
from ..data.models import LoginRequest, GetUserRequest, EchoRequest, LoginResponse, GetUserResponse, EchoResponse

class TestServiceClient(BaseClient):
    """Client for TestService service"""

    def __init__(self, client: IRpcClient):
        super().__init__(client)

    @classmethod
    def create_tcp_client(cls, host: str, port: int) -> '{service.Name}Client':
        """Create a TCP client for the service"
        tcp_client = RpcClientFactory.create_tcp_client(host, port)
        return cls(tcp_client)

    async def Login_async(self, request: LoginRequest) -> LoginResponse:
        """Call Login method"""
        return await self.call_async("TestService.Login", request)

    async def GetUser_async(self, request: GetUserRequest) -> GetUserResponse:
        """Call GetUser method"""
        return await self.call_async("TestService.GetUser", request)

    async def Echo_async(self, request: EchoRequest) -> EchoResponse:
        """Call Echo method"""
        return await self.call_async("TestService.Echo", request)

