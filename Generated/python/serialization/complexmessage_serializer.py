# Generated by BitRPC Protocol Generator
# File: ComplexMessage_serializer.py
# Language: Python
# Date: 2025-09-10 18:38:33


from typing import Any
from bitrpc.serialization import TypeHandler, BitMask, StreamWriter, StreamReader
from ..data.models import ComplexMessage

class ComplexMessageSerializer(TypeHandler):

    @property
    def hash_code(self) -> int:
        return hash('ComplexMessage')

    def write(self, obj: ComplexMessage, writer: StreamWriter) -> None:
        message: ComplexMessage = obj
        mask = BitMask()

        # Bit mask group 0
        mask.set_bit(0, not self._is_default_string(message.field1))
        mask.set_bit(1, not self._is_default_string(message.field2))
        mask.set_bit(2, not self._is_default_string(message.field3))
        mask.set_bit(3, not self._is_default_string(message.field4))
        mask.set_bit(4, not self._is_default_string(message.field5))
        mask.set_bit(5, not self._is_default_string(message.field6))
        mask.set_bit(6, not self._is_default_string(message.field7))
        mask.set_bit(7, not self._is_default_string(message.field8))
        mask.set_bit(8, not self._is_default_string(message.field9))
        mask.set_bit(9, not self._is_default_string(message.field10))
        mask.set_bit(10, not self._is_default_string(message.field11))
        mask.set_bit(11, not self._is_default_string(message.field12))
        mask.set_bit(12, not self._is_default_string(message.field13))
        mask.set_bit(13, not self._is_default_string(message.field14))
        mask.set_bit(14, not self._is_default_string(message.field15))
        mask.set_bit(15, not self._is_default_string(message.field16))
        mask.set_bit(16, not self._is_default_string(message.field17))
        mask.set_bit(17, not self._is_default_string(message.field18))
        mask.set_bit(18, not self._is_default_string(message.field19))
        mask.set_bit(19, not self._is_default_string(message.field20))
        mask.set_bit(20, not self._is_default_string(message.field21))
        mask.set_bit(21, not self._is_default_string(message.field22))
        mask.set_bit(22, not self._is_default_string(message.field23))
        mask.set_bit(23, not self._is_default_string(message.field24))
        mask.set_bit(24, not self._is_default_string(message.field25))
        mask.set_bit(25, not self._is_default_string(message.field26))
        mask.set_bit(26, not self._is_default_string(message.field27))
        mask.set_bit(27, not self._is_default_string(message.field28))
        mask.set_bit(28, not self._is_default_string(message.field29))
        mask.set_bit(29, not self._is_default_string(message.field30))
        mask.set_bit(30, not self._is_default_string(message.field31))
        mask.set_bit(31, not self._is_default_string(message.field32))
        mask.write(writer)

        # Bit mask group 1
        mask.set_bit(0, not self._is_default_string(message.field33))
        mask.set_bit(1, not self._is_default_string(message.field34))
        mask.set_bit(2, not self._is_default_string(message.field35))
        mask.set_bit(3, not self._is_default_string(message.field36))
        mask.set_bit(4, not self._is_default_string(message.field37))
        mask.set_bit(5, not self._is_default_string(message.field38))
        mask.set_bit(6, not self._is_default_string(message.field39))
        mask.set_bit(7, not self._is_default_string(message.field40))
        mask.write(writer)

        # Write field values
        if mask.get_bit(0):
            writer.write_string(message.field1)
        if mask.get_bit(1):
            writer.write_string(message.field2)
        if mask.get_bit(2):
            writer.write_string(message.field3)
        if mask.get_bit(3):
            writer.write_string(message.field4)
        if mask.get_bit(4):
            writer.write_string(message.field5)
        if mask.get_bit(5):
            writer.write_string(message.field6)
        if mask.get_bit(6):
            writer.write_string(message.field7)
        if mask.get_bit(7):
            writer.write_string(message.field8)
        if mask.get_bit(8):
            writer.write_string(message.field9)
        if mask.get_bit(9):
            writer.write_string(message.field10)
        if mask.get_bit(10):
            writer.write_string(message.field11)
        if mask.get_bit(11):
            writer.write_string(message.field12)
        if mask.get_bit(12):
            writer.write_string(message.field13)
        if mask.get_bit(13):
            writer.write_string(message.field14)
        if mask.get_bit(14):
            writer.write_string(message.field15)
        if mask.get_bit(15):
            writer.write_string(message.field16)
        if mask.get_bit(16):
            writer.write_string(message.field17)
        if mask.get_bit(17):
            writer.write_string(message.field18)
        if mask.get_bit(18):
            writer.write_string(message.field19)
        if mask.get_bit(19):
            writer.write_string(message.field20)
        if mask.get_bit(20):
            writer.write_string(message.field21)
        if mask.get_bit(21):
            writer.write_string(message.field22)
        if mask.get_bit(22):
            writer.write_string(message.field23)
        if mask.get_bit(23):
            writer.write_string(message.field24)
        if mask.get_bit(24):
            writer.write_string(message.field25)
        if mask.get_bit(25):
            writer.write_string(message.field26)
        if mask.get_bit(26):
            writer.write_string(message.field27)
        if mask.get_bit(27):
            writer.write_string(message.field28)
        if mask.get_bit(28):
            writer.write_string(message.field29)
        if mask.get_bit(29):
            writer.write_string(message.field30)
        if mask.get_bit(30):
            writer.write_string(message.field31)
        if mask.get_bit(31):
            writer.write_string(message.field32)
        if mask.get_bit(0):
            writer.write_string(message.field33)
        if mask.get_bit(1):
            writer.write_string(message.field34)
        if mask.get_bit(2):
            writer.write_string(message.field35)
        if mask.get_bit(3):
            writer.write_string(message.field36)
        if mask.get_bit(4):
            writer.write_string(message.field37)
        if mask.get_bit(5):
            writer.write_string(message.field38)
        if mask.get_bit(6):
            writer.write_string(message.field39)
        if mask.get_bit(7):
            writer.write_string(message.field40)

    def read(self, reader: StreamReader) -> ComplexMessage:
        message = ComplexMessage()

        # Read bit mask group 0
        mask0 = BitMask()
        mask0.read(reader)

        # Read bit mask group 1
        mask1 = BitMask()
        mask1.read(reader)

        if mask0.get_bit(0):
            message.field1 = reader.read_string()
        if mask0.get_bit(1):
            message.field2 = reader.read_string()
        if mask0.get_bit(2):
            message.field3 = reader.read_string()
        if mask0.get_bit(3):
            message.field4 = reader.read_string()
        if mask0.get_bit(4):
            message.field5 = reader.read_string()
        if mask0.get_bit(5):
            message.field6 = reader.read_string()
        if mask0.get_bit(6):
            message.field7 = reader.read_string()
        if mask0.get_bit(7):
            message.field8 = reader.read_string()
        if mask0.get_bit(8):
            message.field9 = reader.read_string()
        if mask0.get_bit(9):
            message.field10 = reader.read_string()
        if mask0.get_bit(10):
            message.field11 = reader.read_string()
        if mask0.get_bit(11):
            message.field12 = reader.read_string()
        if mask0.get_bit(12):
            message.field13 = reader.read_string()
        if mask0.get_bit(13):
            message.field14 = reader.read_string()
        if mask0.get_bit(14):
            message.field15 = reader.read_string()
        if mask0.get_bit(15):
            message.field16 = reader.read_string()
        if mask0.get_bit(16):
            message.field17 = reader.read_string()
        if mask0.get_bit(17):
            message.field18 = reader.read_string()
        if mask0.get_bit(18):
            message.field19 = reader.read_string()
        if mask0.get_bit(19):
            message.field20 = reader.read_string()
        if mask0.get_bit(20):
            message.field21 = reader.read_string()
        if mask0.get_bit(21):
            message.field22 = reader.read_string()
        if mask0.get_bit(22):
            message.field23 = reader.read_string()
        if mask0.get_bit(23):
            message.field24 = reader.read_string()
        if mask0.get_bit(24):
            message.field25 = reader.read_string()
        if mask0.get_bit(25):
            message.field26 = reader.read_string()
        if mask0.get_bit(26):
            message.field27 = reader.read_string()
        if mask0.get_bit(27):
            message.field28 = reader.read_string()
        if mask0.get_bit(28):
            message.field29 = reader.read_string()
        if mask0.get_bit(29):
            message.field30 = reader.read_string()
        if mask0.get_bit(30):
            message.field31 = reader.read_string()
        if mask0.get_bit(31):
            message.field32 = reader.read_string()
        if mask1.get_bit(0):
            message.field33 = reader.read_string()
        if mask1.get_bit(1):
            message.field34 = reader.read_string()
        if mask1.get_bit(2):
            message.field35 = reader.read_string()
        if mask1.get_bit(3):
            message.field36 = reader.read_string()
        if mask1.get_bit(4):
            message.field37 = reader.read_string()
        if mask1.get_bit(5):
            message.field38 = reader.read_string()
        if mask1.get_bit(6):
            message.field39 = reader.read_string()
        if mask1.get_bit(7):
            message.field40 = reader.read_string()

        return message

    def _is_default_string(self, value: str) -> bool:
        return value == ""

