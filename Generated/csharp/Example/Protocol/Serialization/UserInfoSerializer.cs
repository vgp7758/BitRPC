// Generated by BitRPC Protocol Generator
// File: UserInfoSerializer.cs
// Language: CSharp

using System;
using System.IO;
using BitRPC.Serialization;
using System.Collections.Generic;

namespace Example.Protocol.Serialization
{
    public class UserInfoSerializer : ITypeHandler
    {
        public int HashCode => 1876671786;

        public void Write(object obj, BitRPC.Serialization.StreamWriter writer)
        {
            var message = (UserInfo)obj;
            BitRPC.Serialization.BitMask mask = null;
            try
            {
                mask = BitRPC.Serialization.BitMaskPool.Get(1);
            // Bit mask group 0
            mask.SetBit(0, !IsDefault(message.user_id));
            mask.SetBit(1, !IsDefault(message.username));
            mask.SetBit(2, !IsDefault(message.email));
            mask.SetBit(3, !IsDefault(message.roles));
            mask.SetBit(4, !IsDefault(message.is_active));
            mask.SetBit(5, !IsDefault(message.created_at));
            mask.Write(writer);

            // Write field values
            if (mask.GetBit(0))
            {
                writer.WriteInt64(message.user_id);
            }
            if (mask.GetBit(1))
            {
                writer.WriteString(message.username);
            }
            if (mask.GetBit(2))
            {
                writer.WriteString(message.email);
            }
            if (mask.GetBit(3))
            {
                writer.WriteList(message.roles, x => writer.WriteString(x));
            }
            if (mask.GetBit(4))
            {
                writer.WriteBool(message.is_active);
            }
            if (mask.GetBit(5))
            {
                writer.WriteObject(message.created_at);
            }
            }
            finally
            {
                if (mask != null)
                {
                    BitRPC.Serialization.BitMaskPool.Return(mask);
                }
            }
        }

        public object Read(BitRPC.Serialization.StreamReader reader)
        {
            var message = new UserInfo();

            // Read bit masks using object pool
            BitRPC.Serialization.BitMask[] masks = new BitRPC.Serialization.BitMask[1];
            try
            {
            // Read bit mask group 0
            masks[0] = BitRPC.Serialization.BitMaskPool.Get(1);
            masks[0].Read(reader);
            if (masks[0].GetBit(0))
            {
                message.user_id = reader.ReadInt64();
            }
            if (masks[0].GetBit(1))
            {
                message.username = reader.ReadString();
            }
            if (masks[0].GetBit(2))
            {
                message.email = reader.ReadString();
            }
            if (masks[0].GetBit(3))
            {
                message.roles = reader.ReadList(() => reader.ReadString());
            }
            if (masks[0].GetBit(4))
            {
                message.is_active = reader.ReadBool();
            }
            if (masks[0].GetBit(5))
            {
                message.created_at = (DateTime)reader.ReadObject();
            }
            return message;
            }
            finally
            {
                foreach (var mask in masks)
                {
                    if (mask != null) BitRPC.Serialization.BitMaskPool.Return(mask);
                }
            }
        }

        private bool IsDefault(long value)
        {
            return value == 0L;
        }

        private bool IsDefault(string value)
        {
            return string.IsNullOrEmpty(value);
        }

        private bool IsDefault(List<string> value)
        {
            return value == new List<string>();
        }

        private bool IsDefault(bool value)
        {
            return value == false;
        }

        private bool IsDefault(DateTime value)
        {
            return value == default;
        }

        private static readonly UserInfoSerializer _instance = new UserInfoSerializer();

        public static void Write(UserInfo obj, BitRPC.Serialization.StreamWriter writer)
        {
            _instance.Write(obj, writer);
        }

        public static UserInfo ReadStatic(BitRPC.Serialization.StreamReader reader)
        {
            return (UserInfo)_instance.Read(reader);
        }

    }
}
