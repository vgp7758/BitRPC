// Generated by BitRPC Protocol Generator
// File: GetUserRequestSerializer.cs
// Language: CSharp
// Date: 2025-09-11 10:42:21


using System;
using System.IO;
using BitRPC.Serialization;

namespace Example.Protocol.Serialization
{
    public class GetUserRequestSerializer : ITypeHandler
    {
        public int HashCode => typeof(GetUserRequest).GetHashCode();

        public void Write(object obj, BitRPC.Serialization.StreamWriter writer)
        {
            var message = (GetUserRequest)obj;
            BitRPC.Serialization.BitMask mask = null;
            try
            {
                mask = BitRPC.Serialization.BitMaskPool.Get(1);
            // Bit mask group 0
            mask.SetBit(0, !IsDefault(message.user_id));
            mask.Write(writer);

            // Write field values
            if (mask.GetBit(0))
            {
                writer.WriteInt64(message.user_id);
            }
            }
            finally
            {
                if (mask != null)
                {
                    BitRPC.Serialization.BitMaskPool.Return(mask);
                }
            }
        }

        public object Read(BitRPC.Serialization.StreamReader reader)
        {
            var message = new GetUserRequest();

            // Read bit masks using object pool
            BitRPC.Serialization.BitMask[] masks = new BitRPC.Serialization.BitMask[1];
            try
            {
            // Read bit mask group 0
            masks[0] = BitRPC.Serialization.BitMaskPool.Get(1);
            masks[0].Read(reader);
            if (masks[0].GetBit(0))
            {
                message.user_id = reader.ReadInt64();
            }
            return message;
            }
            finally
            {
                foreach (var mask in masks)
                {
                    if (mask != null) BitRPC.Serialization.BitMaskPool.Return(mask);
                }
            }
        }

        private bool IsDefault(long value)
        {
            return value == 0L;
        }

        private static readonly GetUserRequestSerializer _instance = new GetUserRequestSerializer();

        public static void Write(GetUserRequest obj, BitRPC.Serialization.StreamWriter writer)
        {
            _instance.Write(obj, writer);
        }

        public static GetUserRequest ReadStatic(BitRPC.Serialization.StreamReader reader)
        {
            return (GetUserRequest)_instance.Read(reader);
        }

    }
}
