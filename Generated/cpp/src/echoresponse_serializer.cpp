// Generated by BitRPC Protocol Generator
// File: EchoResponse_serializer.cpp
// Language: Cpp

#include "example::protocol/echoresponse_serializer.h"

namespace bitrpc {
namespace example::protocol {

int EchoResponseSerializer::hash_code() const {
    return 361075971;
}

void EchoResponseSerializer::write(const void* obj, StreamWriter& writer) const {
    const auto& obj_ref = *static_cast<const EchoResponse*>(obj);
    BitMask mask;

    // Bit mask group 0
    mask.set_bit(0, !is_default_string(obj_ref.message));
    mask.set_bit(1, !is_default_int64(obj_ref.timestamp));
    mask.set_bit(2, !is_default_string(obj_ref.server_time));
    mask.write(writer);

    // Write field values
    if (mask.get_bit(0)) {
        writer.write_string(obj_ref.message);
    }
    if (mask.get_bit(1)) {
        writer.write_int64(obj_ref.timestamp);
    }
    if (mask.get_bit(2)) {
        writer.write_string(obj_ref.server_time);
    }
}

void* EchoResponseSerializer::read(StreamReader& reader) const {
    auto obj_ptr = std::make_unique<EchoResponse>();

    // Read bit mask group 0
    BitMask mask0;
    mask0.read(reader);

    if (mask0.get_bit(0)) {
        obj_ptr->message = reader.read_string();
    }
    if (mask0.get_bit(1)) {
        obj_ptr->timestamp = reader.read_int64();
    }
    if (mask0.get_bit(2)) {
        obj_ptr->server_time = reader.read_string();
    }
    return obj_ptr.release();
}
};

bool EchoResponseSerializer::is_default_string(const std::string& value) const {
    return value == "";
}
bool EchoResponseSerializer::is_default_int64(const int64_t& value) const {
    return value == 0;
}

}} // namespace bitrpc
