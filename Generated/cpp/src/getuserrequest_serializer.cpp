// Generated by BitRPC Protocol Generator
// File: GetUserRequest_serializer.cpp
// Language: Cpp
// Date: 2025-09-11 11:50:09


#include "example::protocol/getuserrequest_serializer.h"

namespace bitrpc {
namespace example::protocol {

int GetUserRequestSerializer::hash_code() const {
    return static_cast<int>(std::hash<std::string>{}("GetUserRequest"));
}

void GetUserRequestSerializer::write(const void* obj, StreamWriter& writer) const {
    const auto& message = *static_cast<const GetUserRequest*>(obj);
    BitMask mask;

    // Bit mask group 0
    mask.set_bit(0, !is_default_int64(message.user_id));
    mask.write(writer);

    // Write field values
    if (mask.get_bit(0)) {
        writer.write_int64(message.user_id);
    }
}

void* GetUserRequestSerializer::read(StreamReader& reader) const {
    auto message = std::make_unique<GetUserRequest>();

    // Read bit mask group 0
    BitMask mask0;
    mask0.read(reader);

    if (mask0.get_bit(0)) {
        message->user_id = reader.read_int64();
    }
    return message.release();
}

    bool is_default_int64(const int64_t& value) const;

bool GetUserRequestSerializer::is_default_int64(const int64_t& value) const {
    return value == 0;
}

}} // namespace bitrpc
