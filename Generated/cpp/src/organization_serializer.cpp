// Generated by BitRPC Protocol Generator
// File: Organization_serializer.cpp
// Language: Cpp
// Date: 2025-09-10 20:19:44


#include "example::protocol/organization_serializer.h"

namespace bitrpc {
namespace example::protocol {

int OrganizationSerializer::hash_code() const {
    return static_cast<int>(std::hash<std::string>{}("Organization"));
}

void OrganizationSerializer::write(const void* obj, StreamWriter& writer) const {
    const auto& message = *static_cast<const Organization*>(obj);
    BitMask mask;

    // Bit mask group 0
    mask.set_bit(0, !is_default_string(message.name));
    mask.set_bit(1, !is_default_struct(message.groups));
    mask.set_bit(2, !is_default_string(message.departments));
    mask.set_bit(3, !is_default_struct(message.leader));
    mask.write(writer);

    // Write field values
    if (mask.get_bit(0)) {
        writer.write_string(message.name);
    }
    if (mask.get_bit(1)) {
        writer.write_vector(message.groups, [](const auto& x) { writer.write_object(x) });
    }
    if (mask.get_bit(2)) {
        writer.write_vector(message.departments, [](const auto& x) { writer.write_string(x) });
    }
    if (mask.get_bit(3)) {
        writer.write_object(message.leader);
    }
}

void* OrganizationSerializer::read(StreamReader& reader) const {
    auto message = std::make_unique<Organization>();

    // Read bit mask group 0
    BitMask mask0;
    mask0.read(reader);

    if (mask0.get_bit(0)) {
        message->name = reader.read_string();
    }
    if (mask0.get_bit(1)) {
        message->groups = reader.read_vector([]() { return reader.read_object(); });
    }
    if (mask0.get_bit(2)) {
        message->departments = reader.read_vector([]() { return reader.read_string(); });
    }
    if (mask0.get_bit(3)) {
        message->leader = reader.read_object();
    }
    return message.release();
}

    bool is_default_string(const std::string& value) const;
    bool is_default_struct(const void*& value) const;

bool OrganizationSerializer::is_default_string(const std::string& value) const {
    return value == "";
}
bool OrganizationSerializer::is_default_struct(const void*& value) const {
    return value == ;
}

}} // namespace bitrpc
