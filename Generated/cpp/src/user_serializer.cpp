// Generated by BitRPC Protocol Generator
// File: User_serializer.cpp
// Language: Cpp
// Date: 2025-09-11 11:50:09


#include "example::protocol/user_serializer.h"

namespace bitrpc {
namespace example::protocol {

int UserSerializer::hash_code() const {
    return static_cast<int>(std::hash<std::string>{}("User"));
}

void UserSerializer::write(const void* obj, StreamWriter& writer) const {
    const auto& message = *static_cast<const User*>(obj);
    BitMask mask;

    // Bit mask group 0
    mask.set_bit(0, !is_default_int64(message.user_id));
    mask.set_bit(1, !is_default_string(message.username));
    mask.set_bit(2, !is_default_string(message.email));
    mask.set_bit(3, !is_default_string(message.roles));
    mask.set_bit(4, !is_default_bool(message.is_active));
    mask.set_bit(5, !is_default_datetime(message.created_at));
    mask.write(writer);

    // Write field values
    if (mask.get_bit(0)) {
        writer.write_int64(message.user_id);
    }
    if (mask.get_bit(1)) {
        writer.write_string(message.username);
    }
    if (mask.get_bit(2)) {
        writer.write_string(message.email);
    }
    if (mask.get_bit(3)) {
        writer.write_vector(message.roles, [](const auto& x) { writer.write_string(x) });
    }
    if (mask.get_bit(4)) {
        writer.write_bool(message.is_active);
    }
    if (mask.get_bit(5)) {
        writer.write_object(message.created_at);
    }
}

void* UserSerializer::read(StreamReader& reader) const {
    auto message = std::make_unique<User>();

    // Read bit mask group 0
    BitMask mask0;
    mask0.read(reader);

    if (mask0.get_bit(0)) {
        message->user_id = reader.read_int64();
    }
    if (mask0.get_bit(1)) {
        message->username = reader.read_string();
    }
    if (mask0.get_bit(2)) {
        message->email = reader.read_string();
    }
    if (mask0.get_bit(3)) {
        message->roles = reader.read_vector([]() { return reader.read_string(); });
    }
    if (mask0.get_bit(4)) {
        message->is_active = reader.read_bool();
    }
    if (mask0.get_bit(5)) {
        message->created_at = reader.read_object();
    }
    return message.release();
}

    bool is_default_int64(const int64_t& value) const;
    bool is_default_string(const std::string& value) const;
    bool is_default_bool(const bool& value) const;
    bool is_default_datetime(const std::chrono::system_clock::time_point& value) const;

bool UserSerializer::is_default_int64(const int64_t& value) const {
    return value == 0;
}
bool UserSerializer::is_default_string(const std::string& value) const {
    return value == "";
}
bool UserSerializer::is_default_bool(const bool& value) const {
    return value == false;
}
bool UserSerializer::is_default_datetime(const std::chrono::system_clock::time_point& value) const {
    return value == ;
}

}} // namespace bitrpc
