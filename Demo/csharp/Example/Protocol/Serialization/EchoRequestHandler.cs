// Generated by BitRPC Protocol Generator
// File: EchoRequestHandler.cs
// Language: CSharp

using System;
using System.IO;
using BitRPC.Serialization;
using System.Collections.Generic;
using static BitRPC.Serialization.Types;
using Example.Protocol.Serialization;

namespace Example.Protocol.Serialization
{
    public class EchoRequestHandler : ITypeHandler
    {
        public int HashCode => 1660195677;

        public void Write(object obj, BitRPC.Serialization.StreamWriter writer)
        {
            var message = (EchoRequest)obj;
            BitRPC.Serialization.BitMask mask = null;
            try
            {
                mask = BitRPC.Serialization.BitMaskPool.Get(1);
                // Bit mask group 0
                mask.SetBit(0, !IsDefault(message.message),0);
                mask.SetBit(1, !IsDefault(message.timestamp),0);
                mask.Write(writer,1);

                // Write field values
                if (mask.GetBit(0, 0)) writer.WriteString(message.message);
                if (mask.GetBit(1, 0)) writer.WriteInt64(message.timestamp);
            }
            finally
            {
                if (mask != null)
                {
                    BitRPC.Serialization.BitMaskPool.Return(mask);
                }
            }
        }

        public object Read(BitRPC.Serialization.StreamReader reader)
        {
            var message = new EchoRequest();

            BitRPC.Serialization.BitMask mask = null;
            try
            {
                mask = BitRPC.Serialization.BitMaskPool.Get(1);
                mask.Read(reader, 1);
                if (mask.GetBit(0, 0)) message.message = reader.ReadString();
                if (mask.GetBit(1, 0)) message.timestamp = reader.ReadInt64();
                return message;
            }
            finally
            {
                if (mask != null) BitRPC.Serialization.BitMaskPool.Return(mask);
            }
        }

        public EchoRequestHandler(){ _instance = this; }
        public static readonly EchoRequestHandler _instance;
    }
}

namespace BitRPC.Serialization{
    public static partial class Types{
        public static bool IsDefault(EchoRequest message){
            if (message == null) return true;
            if (!IsDefault(message.message)) return false;
            if (!IsDefault(message.timestamp)) return false;
            return true;
        }
    }
    public partial class StreamWriter{
        public void WriteEchoRequest(EchoRequest message) => EchoRequestHandler._instance.Write(message, this);
    }
    public partial class StreamReader{
        public EchoRequest ReadEchoRequest() => (EchoRequest)EchoRequestHandler._instance.Read(this);
    }
}
