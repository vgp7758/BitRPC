// Generated by BitRPC Protocol Generator
// File: GetUserRequest_serializer.cpp
// Language: Cpp

#include "../include/getuserrequest_serializer.h"

namespace bitrpc {
namespace test::protocol {

int GetUserRequestSerializer::hash_code() const { return -1420445027; }

void GetUserRequestSerializer::write(const void* obj, StreamWriter& writer) const {
    const auto& obj_ref = *static_cast<const GetUserRequest*>(obj);
    uint32_t mask0 = 0;
    if (!(obj_ref.user_id == 0)) mask0 |= (1u << 0);
    writer.write_uint32(mask0);
    if (mask0 & (1u << 0)) { Int64Handler::instance().write(&obj_ref.user_id, writer); }
}

void* GetUserRequestSerializer::read(StreamReader& reader) const {
    auto obj_ptr = std::make_unique<GetUserRequest>();
    uint32_t mask0 = reader.read_uint32();
    if (mask0 & (1u << 0)) { obj_ptr->user_id = *static_cast<int64_t*>(Int64Handler::instance().read(reader)); }
    return obj_ptr.release();
}

void GetUserRequestSerializer::serialize(const GetUserRequest& obj, StreamWriter& writer) { instance().write(&obj, writer); }
std::unique_ptr<GetUserRequest> GetUserRequestSerializer::deserialize(StreamReader& reader) { auto obj_ptr = std::unique_ptr<GetUserRequest>(static_cast<GetUserRequest*>(instance().read(reader))); return obj_ptr; }

}} // namespace bitrpc
