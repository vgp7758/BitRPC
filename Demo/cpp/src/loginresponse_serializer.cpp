// Generated by BitRPC Protocol Generator
// File: LoginResponse_serializer.cpp
// Language: Cpp

#include "Test::Protocol/loginresponse_serializer.h"

namespace bitrpc {
namespace Test::Protocol {

int LoginResponseSerializer::hash_code() const {
    return 100275685;
}

void LoginResponseSerializer::write(const void* obj, StreamWriter& writer) const {
    const auto& obj_ref = *static_cast<const LoginResponse*>(obj);
    BitMask mask;

    // Bit mask group 0
    mask.set_bit(0, !is_default_bool(obj_ref.success));
    mask.set_bit(1, !is_default_struct(obj_ref.user));
    mask.set_bit(2, !is_default_string(obj_ref.token));
    mask.set_bit(3, !is_default_string(obj_ref.error_message));
    mask.write(writer);

    // Write field values
    if (mask.get_bit(0)) {
        writer.write_bool(obj_ref.success);
    }
    if (mask.get_bit(1)) {
        writer.write_object(obj_ref.user);
    }
    if (mask.get_bit(2)) {
        writer.write_string(obj_ref.token);
    }
    if (mask.get_bit(3)) {
        writer.write_string(obj_ref.error_message);
    }
}

void* LoginResponseSerializer::read(StreamReader& reader) const {
    auto obj_ptr = std::make_unique<LoginResponse>();

    // Read bit mask group 0
    BitMask mask0;
    mask0.read(reader);

    if (mask0.get_bit(0)) {
        obj_ptr->success = reader.read_bool();
    }
    if (mask0.get_bit(1)) {
        obj_ptr->user = reader.read_object();
    }
    if (mask0.get_bit(2)) {
        obj_ptr->token = reader.read_string();
    }
    if (mask0.get_bit(3)) {
        obj_ptr->error_message = reader.read_string();
    }
    return obj_ptr.release();
}
};

bool LoginResponseSerializer::is_default_bool(const bool& value) const {
    return value == false;
}
bool LoginResponseSerializer::is_default_struct(const void*& value) const {
    return value == ;
}
bool LoginResponseSerializer::is_default_string(const std::string& value) const {
    return value == "";
}

}} // namespace bitrpc
