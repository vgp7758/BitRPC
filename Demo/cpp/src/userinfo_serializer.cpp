// Generated by BitRPC Protocol Generator
// File: UserInfo_serializer.cpp
// Language: Cpp

#include "Test::Protocol/userinfo_serializer.h"

namespace bitrpc {
namespace Test::Protocol {

int UserInfoSerializer::hash_code() const {
    return 1876671786;
}

void UserInfoSerializer::write(const void* obj, StreamWriter& writer) const {
    const auto& obj_ref = *static_cast<const UserInfo*>(obj);
    BitMask mask;

    // Bit mask group 0
    mask.set_bit(0, !is_default_int64(obj_ref.user_id));
    mask.set_bit(1, !is_default_string(obj_ref.username));
    mask.set_bit(2, !is_default_string(obj_ref.email));
    mask.set_bit(3, !is_default_string(obj_ref.roles));
    mask.set_bit(4, !is_default_bool(obj_ref.is_active));
    mask.set_bit(5, !is_default_datetime(obj_ref.created_at));
    mask.write(writer);

    // Write field values
    if (mask.get_bit(0)) {
        writer.write_int64(obj_ref.user_id);
    }
    if (mask.get_bit(1)) {
        writer.write_string(obj_ref.username);
    }
    if (mask.get_bit(2)) {
        writer.write_string(obj_ref.email);
    }
    if (mask.get_bit(3)) {
        writer.write_vector(obj_ref.roles, [](const auto& x) { writer.write_string(x) });
    }
    if (mask.get_bit(4)) {
        writer.write_bool(obj_ref.is_active);
    }
    if (mask.get_bit(5)) {
        writer.write_object(obj_ref.created_at);
    }
}

void* UserInfoSerializer::read(StreamReader& reader) const {
    auto obj_ptr = std::make_unique<UserInfo>();

    // Read bit mask group 0
    BitMask mask0;
    mask0.read(reader);

    if (mask0.get_bit(0)) {
        obj_ptr->user_id = reader.read_int64();
    }
    if (mask0.get_bit(1)) {
        obj_ptr->username = reader.read_string();
    }
    if (mask0.get_bit(2)) {
        obj_ptr->email = reader.read_string();
    }
    if (mask0.get_bit(3)) {
        obj_ptr->roles = reader.read_vector([]() { return reader.read_string(); });
    }
    if (mask0.get_bit(4)) {
        obj_ptr->is_active = reader.read_bool();
    }
    if (mask0.get_bit(5)) {
        obj_ptr->created_at = reader.read_object();
    }
    return obj_ptr.release();
}
};

bool UserInfoSerializer::is_default_int64(const int64_t& value) const {
    return value == 0;
}
bool UserInfoSerializer::is_default_string(const std::string& value) const {
    return value == "";
}
bool UserInfoSerializer::is_default_bool(const bool& value) const {
    return value == false;
}
bool UserInfoSerializer::is_default_datetime(const std::chrono::system_clock::time_point& value) const {
    return value == ;
}

}} // namespace bitrpc
