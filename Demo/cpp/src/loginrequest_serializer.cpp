// Generated by BitRPC Protocol Generator
// File: LoginRequest_serializer.cpp
// Language: Cpp

#include "../include/loginrequest_serializer.h"

namespace bitrpc {
namespace test::protocol {

int LoginRequestSerializer::hash_code() const { return 175975135; }

void LoginRequestSerializer::write(const void* obj, StreamWriter& writer) const {
    const auto& obj_ref = *static_cast<const LoginRequest*>(obj);
    uint32_t mask0 = 0;
    if (!(obj_ref.username == "")) mask0 |= (1u << 0);
    if (!(obj_ref.password == "")) mask0 |= (1u << 1);
    writer.write_uint32(mask0);
    if (mask0 & (1u << 0)) { StringHandler::instance().write(&obj_ref.username, writer); }
    if (mask0 & (1u << 1)) { StringHandler::instance().write(&obj_ref.password, writer); }
}

void* LoginRequestSerializer::read(StreamReader& reader) const {
    auto obj_ptr = std::make_unique<LoginRequest>();
    uint32_t mask0 = reader.read_uint32();
    if (mask0 & (1u << 0)) { obj_ptr->username = *static_cast<std::string*>(StringHandler::instance().read(reader)); }
    if (mask0 & (1u << 1)) { obj_ptr->password = *static_cast<std::string*>(StringHandler::instance().read(reader)); }
    return obj_ptr.release();
}

void LoginRequestSerializer::serialize(const LoginRequest& obj, StreamWriter& writer) { instance().write(&obj, writer); }
std::unique_ptr<LoginRequest> LoginRequestSerializer::deserialize(StreamReader& reader) { auto obj_ptr = std::unique_ptr<LoginRequest>(static_cast<LoginRequest*>(instance().read(reader))); return obj_ptr; }

}} // namespace bitrpc
